(()=>{"use strict";var t={134:function(t,e,i){var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(o,r){function n(t){try{a(s.next(t))}catch(t){r(t)}}function h(t){try{a(s.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,h)}a((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Chroma=void 0;const o=i(371);e.Chroma=class{constructor(){this.keyboard=new o.Matrix(22,6)}init(t){return s(this,void 0,void 0,(function*(){if(this.uri)return!0;try{const e=yield this.request({url:"http://localhost:54235/razer/chromasdk",body:{title:t.title,description:t.description,author:{name:t.authorName,contact:t.authorContact},device_supported:t.supportedDevices,category:t.category}});return this.uri=e.uri,this.sessionId=e.sessionid,this.interval=setInterval((()=>s(this,void 0,void 0,(function*(){yield this.request({method:"PUT",path:"/heartbeat"})}))),1e3),!0}catch(t){return console.error(t),!1}}))}uninitialize(){return s(this,void 0,void 0,(function*(){this.uri&&(yield this.request({method:"DELETE"}),clearInterval(this.interval))}))}drawKeyboard(t,e,i){return s(this,void 0,void 0,(function*(){this.keyboard.clear(),this.keyboard.copy(t,e,i),yield this.request({path:"/keyboard",method:"PUT",body:{effect:"CHROMA_CUSTOM",param:this.keyboard.data}})}))}request(t){return s(this,void 0,void 0,(function*(){if(!t.url&&!this.uri)return;const e={method:t.method||"POST"};t.body&&(e.headers={"content-type":"application/json"},e.body=JSON.stringify(t.body));let i=t.url||this.uri;t.path&&(i+=t.path);const s=yield fetch(i,e);return yield s.json()}))}}},607:function(t,e,i){var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(o,r){function n(t){try{a(s.next(t))}catch(t){r(t)}}function h(t){try{a(s.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,h)}a((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const o=i(134),r=i(970);s(void 0,void 0,void 0,(function*(){JSON.stringify({title:"Razer Snake",description:"Snake Game for Razer Chroma Keyboards",author:{name:"Diego Iáñez Ávila",contact:"https://github.com/diegodan1893"},device_supported:["keyboard"],category:"game"});const t=new o.Chroma;(yield t.init({title:"Razer Snake",description:"Snake Game for Razer Chroma Keyboards",authorName:"Diego Iáñez Ávila",authorContact:"https://github.com/diegodan1893",supportedDevices:["keyboard"],category:"game"}))&&new r.SnakeBoard(t,11,4,2,1).startGame()}))},371:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Matrix=void 0,e.Matrix=class{constructor(t,e,i=0){this.width=t,this.height=e,this.fillValue=i,this._data=new Array(e).fill(0).map((()=>new Array(t).fill(i)))}get data(){return this._data}clear(){for(let t=0;t<this.height;++t)for(let e=0;e<this.width;++e)this._data[t][e]=this.fillValue}set(t,e,i){this._data[e][t]=i}copy(t,e=0,i=0){t._data.forEach(((t,s)=>t.forEach(((t,o)=>this._data[s+i][o+e]=t))))}}},726:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.randomInRange=void 0,e.randomInRange=(t,e)=>Math.random()*(e-t)+t},492:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Food=void 0;const s=i(726),o=i(425);e.Food=class{constructor(t){this.board=t,this.position={x:0,y:0},this.regenerate()}update(){}draw(t){t.set(this.position.x,this.position.y,16777215)}testCollision(t){return this.position.x==t.x&&this.position.y==t.y}handleCollision(t){t instanceof o.Snake&&(t.grow(1),this.regenerate())}regenerate(){let t;do{t={x:Math.floor((0,s.randomInRange)(0,this.board.width)),y:Math.floor((0,s.randomInRange)(0,this.board.height))}}while(this.board.query(t));this.position=t}}},425:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Snake=void 0,function(t){t[t.None=0]="None",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right"}(i||(i={}));class s{constructor(t){this.maxLength=t,this.buffer=new Array(t),this.start=0,this.end=0,this.length=0}enqueue(t){this.buffer[this.end-1]!==t&&this.length!==this.maxLength&&(++this.length,this.buffer[this.end]=t,this.end=(this.end+1)%this.maxLength)}dequeue(){if(0===this.length)return;--this.length;const t=this.buffer[this.start];return this.start=(this.start+1)%this.maxLength,t}}class o{constructor(t,e,o,r){this.board=t,this.snake=e,this.position=o,this.prev=r,this.direction=i.None,r||(this.inputBuffer=new s(3)),this.alive=!0}update(){if(this.processInput(),this.next&&this.next.update(),this.snake.alive){const t=this.direction;if(this.prev&&(this.direction=this.prev.direction),t===i.None)return;const e=this.getNextPosition(t);if(!this.prev){const t=this.board.query(e);t&&t.handleCollision(this.snake)}this.position=e}else this.alive&&(this.prev?this.alive=this.prev.alive:this.alive=!1)}draw(t){t.set(this.position.x,this.position.y,this.alive?65280:255),this.next&&this.next.draw(t)}testCollision(t){return t.x===this.position.x&&t.y===this.position.y||!!this.next&&this.next.testCollision(t)}handleCollision(t){this.snake.kill(),this.board.loseGame()}handleInput(t){if(!this.inputBuffer)return;let e=this.direction;switch(t){case"ArrowUp":e=i.Up;break;case"ArrowDown":e=i.Down;break;case"ArrowRight":e=i.Right;break;case"ArrowLeft":e=i.Left}this.inputBuffer.enqueue(e)}grow(t){t<=0||(this.next?this.next.grow(t):(this.next=new o(this.board,this.snake,this.position,this),this.next.grow(t-1)))}getNextPosition(t){const e={x:this.position.x,y:this.position.y};switch(t){case i.None:break;case i.Up:e.y=(e.y+this.board.height-1)%this.board.height;break;case i.Down:e.y=(e.y+1)%this.board.height;break;case i.Left:e.x=(e.x+this.board.width-1)%this.board.width;break;case i.Right:e.x=(e.x+1)%this.board.width}return e}processInput(){if(!this.inputBuffer)return;let t=this.inputBuffer.dequeue(),e=!1;for(;t&&!e;){const i=this.getNextPosition(t);this.next&&this.next.position.x===i.x&&this.next.position.y===i.y?t=this.inputBuffer.dequeue():(this.direction=t,e=!0)}}}e.Snake=class{constructor(t,e,i){this.board=t,this.head=new o(t,this,e,void 0),this.grow(i-1),this._alive=!0}get alive(){return this._alive}update(){this.head.update()}draw(t){this.head.draw(t)}testCollision(t){return this.head.testCollision(t)}handleCollision(t){this.head.handleCollision(t)}handleInput(t){this.head.handleInput(t)}grow(t=1){this.head.grow(t)}kill(){this._alive=!1}}},970:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SnakeBoard=void 0;const s=i(371),o=i(425),r=i(492);var n;!function(t){t[t.Stopped=0]="Stopped",t[t.Playing=1]="Playing",t[t.GameOver=2]="GameOver"}(n||(n={})),e.SnakeBoard=class{constructor(t,e,i,o,r){this.chroma=t,this._width=e,this._height=i,this.offsetX=o,this.offsetY=r,this.entities=[],this.state=n.Stopped,this.screen=new s.Matrix(this.width,this.height)}get width(){return this._width}get height(){return this._height}update(){this.entities.forEach((t=>t.update()))}draw(){this.screen.clear(),this.entities.forEach((t=>t.draw(this.screen))),this.chroma.drawKeyboard(this.screen,this.offsetX,this.offsetY)}query(t){return this.entities.find((e=>e.testCollision(t)))}startGame(){this.state!==n.Stopped&&this.stopGame(),this.entities=[new o.Snake(this,{x:1,y:Math.floor(this.height/2)},3),new r.Food(this)],this.state=n.Playing,this.inputAbortController=new AbortController,document.addEventListener("keydown",(t=>{"Backspace"===t.key?this.startGame():this.entities.forEach((e=>{e.handleInput&&e.handleInput(t.key)}))}),{signal:this.inputAbortController.signal}),this.interval=setInterval((()=>{this.update(),this.draw()}),200)}stopGame(){this.state=n.Stopped,this.inputAbortController&&this.inputAbortController.abort(),this.interval&&(clearInterval(this.interval),this.interval=void 0)}loseGame(){this.state=n.GameOver}}}},e={};!function i(s){var o=e[s];if(void 0!==o)return o.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,i),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,