(()=>{"use strict";var A={262:(A,n,t)=>{t.d(n,{Z:()=>a});var e=t(537),i=t.n(e),r=t(645),o=t.n(r)()(i());o.push([A.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400&display=swap);"]),o.push([A.id,'/*\n! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.absolute {\n  position: absolute;\n}\r\n.relative {\n  position: relative;\n}\r\n.flex {\n  display: flex;\n}\r\n.inline-flex {\n  display: inline-flex;\n}\r\n.hidden {\n  display: none;\n}\r\n.h-48 {\n  height: 12rem;\n}\r\n.h-10 {\n  height: 2.5rem;\n}\r\n.h-full {\n  height: 100%;\n}\r\n.min-h-screen {\n  min-height: 100vh;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.w-10 {\n  width: 2.5rem;\n}\r\n.flex-1 {\n  flex: 1 1 0%;\n}\r\n@keyframes ping {\n\n  75%, 100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\r\n.animate-ping {\n  animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;\n}\r\n.flex-col {\n  flex-direction: column;\n}\r\n.items-end {\n  align-items: flex-end;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.justify-center {\n  justify-content: center;\n}\r\n.space-y-5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.25rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.25rem * var(--tw-space-y-reverse));\n}\r\n.rounded-full {\n  border-radius: 9999px;\n}\r\n.rounded-\\[4px\\] {\n  border-radius: 4px;\n}\r\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\r\n.bg-razer-dark-gray {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 17 17 / var(--tw-bg-opacity));\n}\r\n.bg-razer-green {\n  --tw-bg-opacity: 1;\n  background-color: rgb(68 214 44 / var(--tw-bg-opacity));\n}\r\n.bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\r\n.p-10 {\n  padding: 2.5rem;\n}\r\n.py-10 {\n  padding-top: 2.5rem;\n  padding-bottom: 2.5rem;\n}\r\n.px-1\\.5 {\n  padding-left: 0.375rem;\n  padding-right: 0.375rem;\n}\r\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\r\n.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\r\n.text-center {\n  text-align: center;\n}\r\n.align-middle {\n  vertical-align: middle;\n}\r\n.font-roboto {\n  font-family: Roboto, sans-serif;\n}\r\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\r\n.text-\\[0\\] {\n  font-size: 0;\n}\r\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\r\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\r\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\r\n.font-normal {\n  font-weight: 400;\n}\r\n.font-thin {\n  font-weight: 100;\n}\r\n.font-light {\n  font-weight: 300;\n}\r\n.uppercase {\n  text-transform: uppercase;\n}\r\n.tracking-\\[\\.6em\\] {\n  letter-spacing: .6em;\n}\r\n.text-razer-light-gray {\n  --tw-text-opacity: 1;\n  color: rgb(136 136 136 / var(--tw-text-opacity));\n}\r\n.text-razer-green {\n  --tw-text-opacity: 1;\n  color: rgb(68 214 44 / var(--tw-text-opacity));\n}\r\n.text-gray-800 {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.opacity-75 {\n  opacity: 0.75;\n}\r\n.text-glow-razer-green {\n  text-shadow: 0 0 25px #44d62c, 0 0 25px #44d62c, 0 0 25px #44d62c;\n}\r\n.text-glow-white {\n  text-shadow: 0 0 25px #fff, 0 0 25px #fff, 0 0 25px #fff;\n}\r\n\r\n.hover\\:underline:hover {\n  text-decoration-line: underline;\n}\r\n',"",{version:3,sources:["webpack://./src/main.css","<no source>"],names:[],mappings:"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;CAAc;;AAAd;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,4NAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;AAEd;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;;EAAA;IAAA,mBAAmB;IAAnB;EAAmB;AAAA;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+DAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;;AAFnB;EAAA;CCAA",sourcesContent:["@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400&display=swap');\r\n",null],sourceRoot:""}]);const a=o},645:A=>{A.exports=function(A){var n=[];return n.toString=function(){return this.map((function(n){var t="",e=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),e&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=A(n),e&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(A,t,e,i,r){"string"==typeof A&&(A=[[null,A,void 0]]);var o={};if(e)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var d=0;d<A.length;d++){var c=[].concat(A[d]);e&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},537:A=>{A.exports=function(A){var n=A[1],t=A[3];if(!t)return n;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),r="/*# ".concat(i," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},701:(A,n,t)=>{t.r(n),t.d(n,{default:()=>g});var e=t(379),i=t.n(e),r=t(795),o=t.n(r),a=t(569),s=t.n(a),d=t(565),c=t.n(d),h=t(216),l=t.n(h),u=t(589),p=t.n(u),m=t(262),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),i()(m.Z,f);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},379:A=>{var n=[];function t(A){for(var t=-1,e=0;e<n.length;e++)if(n[e].identifier===A){t=e;break}return t}function e(A,e){for(var r={},o=[],a=0;a<A.length;a++){var s=A[a],d=e.base?s[0]+e.base:s[0],c=r[d]||0,h="".concat(d," ").concat(c);r[d]=c+1;var l=t(h),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)n[l].references++,n[l].updater(u);else{var p=i(u,e);e.byIndex=a,n.splice(a,0,{identifier:h,updater:p,references:1})}o.push(h)}return o}function i(A,n){var t=n.domAPI(n);return t.update(A),function(n){if(n){if(n.css===A.css&&n.media===A.media&&n.sourceMap===A.sourceMap&&n.supports===A.supports&&n.layer===A.layer)return;t.update(A=n)}else t.remove()}}A.exports=function(A,i){var r=e(A=A||[],i=i||{});return function(A){A=A||[];for(var o=0;o<r.length;o++){var a=t(r[o]);n[a].references--}for(var s=e(A,i),d=0;d<r.length;d++){var c=t(r[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=s}}},569:A=>{var n={};A.exports=function(A,t){var e=function(A){if(void 0===n[A]){var t=document.querySelector(A);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(A){t=null}n[A]=t}return n[A]}(A);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}},216:A=>{A.exports=function(A){var n=document.createElement("style");return A.setAttributes(n,A.attributes),A.insert(n,A.options),n}},565:(A,n,t)=>{A.exports=function(A){var n=t.nc;n&&A.setAttribute("nonce",n)}},795:A=>{A.exports=function(A){var n=A.insertStyleElement(A);return{update:function(t){!function(A,n,t){var e="";t.supports&&(e+="@supports (".concat(t.supports,") {")),t.media&&(e+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(e+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),e+=t.css,i&&(e+="}"),t.media&&(e+="}"),t.supports&&(e+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(e,A,n.options)}(n,A,t)},remove:function(){!function(A){if(null===A.parentNode)return!1;A.parentNode.removeChild(A)}(n)}}}},589:A=>{A.exports=function(A,n){if(n.styleSheet)n.styleSheet.cssText=A;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(A))}}},134:function(A,n,t){var e=this&&this.__awaiter||function(A,n,t,e){return new(t||(t=Promise))((function(i,r){function o(A){try{s(e.next(A))}catch(A){r(A)}}function a(A){try{s(e.throw(A))}catch(A){r(A)}}function s(A){var n;A.done?i(A.value):(n=A.value,n instanceof t?n:new t((function(A){A(n)}))).then(o,a)}s((e=e.apply(A,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.Chroma=void 0;const i=t(371);n.Chroma=class{constructor(){this.keyboard=new i.Matrix(22,6)}init(A){return e(this,void 0,void 0,(function*(){if(this.uri)return!0;try{const n=yield this.request({url:"http://localhost:54235/razer/chromasdk",body:{title:A.title,description:A.description,author:{name:A.authorName,contact:A.authorContact},device_supported:A.supportedDevices,category:A.category}});return this.uri=n.uri,this.sessionId=n.sessionid,this.interval=setInterval((()=>e(this,void 0,void 0,(function*(){yield this.request({method:"PUT",path:"/heartbeat"})}))),1e3),!0}catch(A){return console.error(A),!1}}))}uninitialize(){return e(this,void 0,void 0,(function*(){this.uri&&(yield this.request({method:"DELETE"}),clearInterval(this.interval))}))}drawKeyboard(A,n,t){return e(this,void 0,void 0,(function*(){this.keyboard.clear(),this.keyboard.copy(A,n,t),yield this.request({path:"/keyboard",method:"PUT",body:{effect:"CHROMA_CUSTOM",param:this.keyboard.data}})}))}request(A){return e(this,void 0,void 0,(function*(){if(!A.url&&!this.uri)return;const n={method:A.method||"POST"};A.body&&(n.headers={"content-type":"application/json"},n.body=JSON.stringify(A.body));let t=A.url||this.uri;A.path&&(t+=A.path);const e=yield fetch(t,n);return yield e.json()}))}}},607:function(A,n,t){var e=this&&this.__awaiter||function(A,n,t,e){return new(t||(t=Promise))((function(i,r){function o(A){try{s(e.next(A))}catch(A){r(A)}}function a(A){try{s(e.throw(A))}catch(A){r(A)}}function s(A){var n;A.done?i(A.value):(n=A.value,n instanceof t?n:new t((function(A){A(n)}))).then(o,a)}s((e=e.apply(A,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0});const i=t(134),r=t(970);t(701);const o=(A,n)=>{A&&(n?(A.classList.remove("hidden"),A.classList.add("flex")):(A.classList.remove("flex"),A.classList.add("hidden")))};e(void 0,void 0,void 0,(function*(){const A=document.getElementById("loading"),n=document.getElementById("playing"),t=document.getElementById("error"),e=(JSON.stringify({title:"Razer Snake",description:"Snake Game for Razer Chroma Keyboards",author:{name:"Diego Iáñez Ávila",contact:"https://github.com/diegodan1893"},device_supported:["keyboard"],category:"game"}),new i.Chroma),a=yield e.init({title:"Razer Snake",description:"Snake Game for Razer Chroma Keyboards",authorName:"Diego Iáñez Ávila",authorContact:"https://github.com/diegodan1893",supportedDevices:["keyboard"],category:"game"});o(A,!1),a?(new r.SnakeBoard(e,11,4,2,1).startGame(),o(n,!0)):o(t,!0)}))},371:(A,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Matrix=void 0,n.Matrix=class{constructor(A,n,t=0){this.width=A,this.height=n,this.fillValue=t,this._data=new Array(n).fill(0).map((()=>new Array(A).fill(t)))}get data(){return this._data}clear(){for(let A=0;A<this.height;++A)for(let n=0;n<this.width;++n)this._data[A][n]=this.fillValue}set(A,n,t){this._data[n][A]=t}copy(A,n=0,t=0){A._data.forEach(((A,e)=>A.forEach(((A,i)=>this._data[e+t][i+n]=A))))}}},726:(A,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.randomInRange=void 0,n.randomInRange=(A,n)=>Math.random()*(n-A)+A},492:(A,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Food=void 0;const e=t(726),i=t(425);n.Food=class{constructor(A){this.board=A,this.position={x:0,y:0},this.regenerate()}update(){}draw(A){A.set(this.position.x,this.position.y,16777215)}testCollision(A){return this.position.x==A.x&&this.position.y==A.y}handleCollision(A){A instanceof i.Snake&&(A.grow(1),this.regenerate())}regenerate(){let A;do{A={x:Math.floor((0,e.randomInRange)(0,this.board.width)),y:Math.floor((0,e.randomInRange)(0,this.board.height))}}while(this.board.query(A));this.position=A}}},425:(A,n)=>{var t;Object.defineProperty(n,"__esModule",{value:!0}),n.Snake=void 0,function(A){A[A.None=0]="None",A[A.Up=1]="Up",A[A.Down=2]="Down",A[A.Left=3]="Left",A[A.Right=4]="Right"}(t||(t={}));class e{constructor(A){this.maxLength=A,this.buffer=new Array(A),this.start=0,this.end=0,this.length=0}enqueue(A){this.buffer[this.end-1]!==A&&this.length!==this.maxLength&&(++this.length,this.buffer[this.end]=A,this.end=(this.end+1)%this.maxLength)}dequeue(){if(0===this.length)return;--this.length;const A=this.buffer[this.start];return this.start=(this.start+1)%this.maxLength,A}}class i{constructor(A,n,i,r){this.board=A,this.snake=n,this.position=i,this.prev=r,this.direction=t.None,r||(this.inputBuffer=new e(3)),this.alive=!0}update(){if(this.processInput(),this.next&&this.next.update(),this.snake.alive){const A=this.direction;if(this.prev&&(this.direction=this.prev.direction),A===t.None)return;const n=this.getNextPosition(A);if(!this.prev){const A=this.board.query(n);A&&A.handleCollision(this.snake)}this.position=n}else this.alive&&(this.prev?this.alive=this.prev.alive:this.alive=!1)}draw(A){A.set(this.position.x,this.position.y,this.alive?65280:255),this.next&&this.next.draw(A)}testCollision(A){return A.x===this.position.x&&A.y===this.position.y||!!this.next&&this.next.testCollision(A)}handleCollision(A){this.snake.kill(),this.board.loseGame()}handleInput(A){if(!this.inputBuffer)return;let n=this.direction;switch(A){case"ArrowUp":n=t.Up;break;case"ArrowDown":n=t.Down;break;case"ArrowRight":n=t.Right;break;case"ArrowLeft":n=t.Left}this.inputBuffer.enqueue(n)}grow(A){A<=0||(this.next?this.next.grow(A):(this.next=new i(this.board,this.snake,this.position,this),this.next.grow(A-1)))}getNextPosition(A){const n={x:this.position.x,y:this.position.y};switch(A){case t.None:break;case t.Up:n.y=(n.y+this.board.height-1)%this.board.height;break;case t.Down:n.y=(n.y+1)%this.board.height;break;case t.Left:n.x=(n.x+this.board.width-1)%this.board.width;break;case t.Right:n.x=(n.x+1)%this.board.width}return n}processInput(){if(!this.inputBuffer)return;let A=this.inputBuffer.dequeue(),n=!1;for(;A&&!n;){const t=this.getNextPosition(A);this.next&&this.next.position.x===t.x&&this.next.position.y===t.y?A=this.inputBuffer.dequeue():(this.direction=A,n=!0)}}}n.Snake=class{constructor(A,n,t){this.board=A,this.head=new i(A,this,n,void 0),this.grow(t-1),this._alive=!0}get alive(){return this._alive}update(){this.head.update()}draw(A){this.head.draw(A)}testCollision(A){return this.head.testCollision(A)}handleCollision(A){this.head.handleCollision(A)}handleInput(A){this.head.handleInput(A)}grow(A=1){this.head.grow(A)}kill(){this._alive=!1}}},970:(A,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SnakeBoard=void 0;const e=t(371),i=t(425),r=t(492);var o;!function(A){A[A.Stopped=0]="Stopped",A[A.Playing=1]="Playing",A[A.GameOver=2]="GameOver"}(o||(o={})),n.SnakeBoard=class{constructor(A,n,t,i,r){this.chroma=A,this._width=n,this._height=t,this.offsetX=i,this.offsetY=r,this.entities=[],this.state=o.Stopped,this.screen=new e.Matrix(this.width,this.height)}get width(){return this._width}get height(){return this._height}update(){this.entities.forEach((A=>A.update()))}draw(){this.screen.clear(),this.entities.forEach((A=>A.draw(this.screen))),this.chroma.drawKeyboard(this.screen,this.offsetX,this.offsetY)}query(A){return this.entities.find((n=>n.testCollision(A)))}startGame(){this.state!==o.Stopped&&this.stopGame(),this.entities=[new i.Snake(this,{x:1,y:Math.floor(this.height/2)},3),new r.Food(this)],this.state=o.Playing,this.inputAbortController=new AbortController,document.addEventListener("keydown",(A=>{"Backspace"===A.key?this.startGame():this.entities.forEach((n=>{n.handleInput&&n.handleInput(A.key)}))}),{signal:this.inputAbortController.signal}),this.interval=setInterval((()=>{this.update(),this.draw()}),200)}stopGame(){this.state=o.Stopped,this.inputAbortController&&this.inputAbortController.abort(),this.interval&&(clearInterval(this.interval),this.interval=void 0)}loseGame(){this.state=o.GameOver}}}},n={};function t(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={id:e,exports:{}};return A[e].call(r.exports,r,r.exports,t),r.exports}t.n=A=>{var n=A&&A.__esModule?()=>A.default:()=>A;return t.d(n,{a:n}),n},t.d=(A,n)=>{for(var e in n)t.o(n,e)&&!t.o(A,e)&&Object.defineProperty(A,e,{enumerable:!0,get:n[e]})},t.o=(A,n)=>Object.prototype.hasOwnProperty.call(A,n),t.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},t.nc=void 0,t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,